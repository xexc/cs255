
Briefly summarize the DriverPass project. Who was the client? What type of system did they want you to design?
  The DriverPass project aimed to develop a system for driver training, targeting students preparing 
for driving license exams. The client wanted a web-based platform offering 
online classes, practice tests, and on-the-road training to enhance students' driving skills and success 
rates in passing DMV tests.

What did you do particularly well?
  In the provided scenario, we successfully addressed aspects of system functionality, security, and usability. 
We created a system that distinguishes between user types, validates login credentials, 
offers online learning tools, and allows administrators to manage user accounts and orders effectively.

If you could choose one part of your work on these documents to revise, what would you pick? How would you improve it?
  If I were to choose one part of the work to revise, it would be the assumptions section. 
Some assumptions seem overly optimistic, like expecting users to always show up punctually or being available for lessons. 
These assumptions might not hold true in real-world scenarios.

How did you interpret the user’s needs and implement them into your system design?
Why is it so important to consider the user’s needs when designing?
  Interpreting the user's needs and implementing them into the system design involved closely analyzing the provided 
information about the client's goals, objectives, and desired system features. This is crucial because software 
should cater to the specific needs and preferences of the users, ensuring it meets their expectations and delivers value.

How do you approach designing software?
  When designing software, I follow the strategies of requirement analysis, modular design, scalability and flexibility,
security considerations, documentation and agile methodology. 

What techniques or strategies would you use in the future to analyze and design a system?
  In the future I would use techniques like Entity-Relationship Diagrams (ERDs) 
for database design, Unified Modeling Language (UML) diagrams for system architecture, and User Stories for capturing 
user requirements. 
